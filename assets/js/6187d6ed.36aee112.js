"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5018],{8309:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"i\u4e3b\u89c2\u7684\u4f53\u9a8c\u65b9\u5f0f/t\u5feb\u4e50\u7684\u4f53\u9a8c/\u7535\u4fe1/Os/macOS/\u4e00\u6b21\u5178\u578b\u81ea\u52a8\u90e8\u7f72mac\u865a\u62df\u673a\u914d\u7f6e\u8fc7\u7a0b","title":"\u4e00\u6b21\u5178\u578b\u81ea\u52a8\u90e8\u7f72mac\u865a\u62df\u673a\u914d\u7f6e\u8fc7\u7a0b","description":"Upgrade to macOS 10.12.6","source":"@site/../g/i\u4e3b\u89c2\u7684\u4f53\u9a8c\u65b9\u5f0f/t\u5feb\u4e50\u7684\u4f53\u9a8c/\u7535\u4fe1/Os/macOS/\u4e00\u6b21\u5178\u578b\u81ea\u52a8\u90e8\u7f72mac\u865a\u62df\u673a\u914d\u7f6e\u8fc7\u7a0b.md","sourceDirName":"i\u4e3b\u89c2\u7684\u4f53\u9a8c\u65b9\u5f0f/t\u5feb\u4e50\u7684\u4f53\u9a8c/\u7535\u4fe1/Os/macOS","slug":"/i\u4e3b\u89c2\u7684\u4f53\u9a8c\u65b9\u5f0f/t\u5feb\u4e50\u7684\u4f53\u9a8c/\u7535\u4fe1/Os/macOS/\u4e00\u6b21\u5178\u578b\u81ea\u52a8\u90e8\u7f72mac\u865a\u62df\u673a\u914d\u7f6e\u8fc7\u7a0b","permalink":"/g/docs/i\u4e3b\u89c2\u7684\u4f53\u9a8c\u65b9\u5f0f/t\u5feb\u4e50\u7684\u4f53\u9a8c/\u7535\u4fe1/Os/macOS/\u4e00\u6b21\u5178\u578b\u81ea\u52a8\u90e8\u7f72mac\u865a\u62df\u673a\u914d\u7f6e\u8fc7\u7a0b","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"macOS\u4f7f\u7528\u8be6\u89e3","permalink":"/g/docs/i\u4e3b\u89c2\u7684\u4f53\u9a8c\u65b9\u5f0f/t\u5feb\u4e50\u7684\u4f53\u9a8c/\u7535\u4fe1/Os/macOS/macOS\u4f7f\u7528\u8be6\u89e3"},"next":{"title":"Firebase\u4f7f\u7528\u8be6\u89e3","permalink":"/g/docs/i\u4e3b\u89c2\u7684\u4f53\u9a8c\u65b9\u5f0f/t\u5feb\u4e50\u7684\u4f53\u9a8c/\u7535\u4fe1/Test/Firebase\u4f7f\u7528\u8be6\u89e3"}}');var s=t(4848),o=t(8453);const c={},r=void 0,a={},l=[];function d(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Upgrade to macOS 10.12.6"}),"\n",(0,s.jsx)(n.p,{children:"Xcode 9.1"}),"\n",(0,s.jsx)(n.p,{children:"Security Update 2017-001"}),"\n",(0,s.jsx)(n.p,{children:"optimize some"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://brew.sh",children:"https://brew.sh"})}),"\n",(0,s.jsx)(n.p,{children:"brew install node"}),"\n",(0,s.jsx)(n.p,{children:"npm install -g react-native-cli"}),"\n",(0,s.jsxs)(n.p,{children:["npm config set registry ",(0,s.jsx)(n.a,{href:"https://registry.npm.taobao.org",children:"https://registry.npm.taobao.org"})," --global"]}),"\n",(0,s.jsx)(n.p,{children:"brew install watchman"}),"\n",(0,s.jsx)(n.p,{children:"gitlab-runner register to shell"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"http://docs.gitlab.com/runner/install/osx.html",children:"http://docs.gitlab.com/runner/install/osx.html"}),"\nAnd set macOS to auto login with account runner"]}),"\n",(0,s.jsxs)(n.p,{children:["gilab-runner OK with ",(0,s.jsx)(n.code,{children:"~/builds/"})," and ",(0,s.jsx)(n.code,{children:"~/cache/"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"npm run ios"})," OK\n",(0,s.jsx)(n.code,{children:"npm run build-ios"})," OK, just js build in ~/builds/"]}),"\n",(0,s.jsx)(n.p,{children:"Remote Login enabled by ssh"}),"\n",(0,s.jsx)(n.p,{children:"\u7cfb\u7edf\u504f\u597d\u8bbe\u7f6e | \u9009\u62e9\u5171\u4eab | \u70b9\u51fb\u8fdc\u7a0b\u767b\u5f55"}),"\n",(0,s.jsx)(n.p,{children:"xcodebuild OK"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Double click *.mobileprovision in ~/Downloads/ , now you can see the provision in "Xcode".\n\nDouble click *.p12 in ~/Downloads/ , import them into System Keychain, then in "KeyChain Access", find related private key, and set it\'s `Access Control` to `Allow all applications to access this item`. Now can `xcodebuild archive -scheme YourProject -destination generic/platform=iOS -archivePath bin/YourProject.xcarchive -quiet` . Ref to [\u4f7f\u7528 xcodebuild \u4ece archive \u5bfc\u51fa ipa](https://blog.reohou.com/how-to-export-ipa-from-archive-using-xcodebuild/) .\n\nRef to [Xcode9 xcodebuild export plist \u914d\u7f6e](http://www.jianshu.com/p/6b68cd9307bc) to get the `ExportOptions.plist` , now can `xcodebuild -exportArchive -archivePath bin/YourProject.xcarchive -exportPath bin/YourProject -exportOptionsPlist development-ExportOptions.plist` .\n\n`sudo visudo` , add `%staff          ALL = NOPASSWD: /usr/sbin/ntpdate`, now can run `sudo ntpdate -u time.apple.com` without password, and thus newly added `/usr/local/bin/ossutilmac64` can access aliyun with the corrected date\n\nnpm install -g code-push-cli\n'})}),"\n",(0,s.jsx)(n.p,{children:"brew install wget"}),"\n",(0,s.jsxs)(n.p,{children:["only put .gitignore in ",(0,s.jsx)(n.code,{children:"~/cache/YourProject/default/cache.zip"})]}),"\n",(0,s.jsx)(n.p,{children:"disble app store auto update"})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var i=t(6540);const s={},o=i.createContext(s);function c(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);