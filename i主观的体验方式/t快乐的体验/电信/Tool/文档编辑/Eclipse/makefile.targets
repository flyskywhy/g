# ref to https://github.com/flyskywhy/makefile/blob/master/Makefile
#
# Included by eclipse generated {Configuration in eclipse}/makefile, thus support .d,
# so that after edit .h out of eclipse, then whether `cd {Configuration of eclipse}; make`
# or build in eclipse, related .c will successfully be compiled.
#
# `cd {Configuration in eclipse}`
# `make` can compile
# `make cleanD` can clean .d
#
# You may only need change MY_CFLAGS and MY_CC.
# If your source is .cpp not .c, please change `addsuffix .c` to `addsuffix .cpp`
# If run on Linux, it's better to use `%.d:$(C_SRCS)` instead of `%.d:`

# ref to eclipse generated subdir.mk
# The pre-processor and compiler options.
MY_CFLAGS = -D__PROJECT_MESH__=1 -D__telink__ -DCHIP_TYPE=CHIP_TYPE_8258
MY_CFLAGS += -Wall -O2 -fpack-struct -fshort-enums -finline-small-functions -std=gnu99
MY_CFLAGS += -fshort-wchar -fms-extensions
MY_CFLAGS += -ffunction-sections -fdata-sections
MY_CFLAGS += -I$(SRCROOT)
MY_CFLAGS += -I$(SRCROOT)/vendor/common/mi_api/libs
MY_CFLAGS += -I$(SRCROOT)/vendor/common/mi_api/mijia_ble_api
MY_CFLAGS += -L$(SRCROOT)/proj_lib

# The root of the project.
SRCROOT   = ..

# The object file type.
OBJEXT ?= .o

# The C program compiler.
MY_CC  := tc32-elf-gcc

# The command used to delete file.
RM     = rm -f

DEPS    = $(OBJS:$(OBJEXT)=.d)

## Define some useful variables.
DEP_OPT = $(shell if `$(MY_CC) --version | grep "gcc" >/dev/null`; then \
                  echo "-MM -MP"; else echo "-M"; fi )
DEPEND      = $(MY_CC)  $(DEP_OPT)  $(MY_CFLAGS)
DEPEND.d    = $(subst -g ,,$(DEPEND))
COMPILE.c   = $(MY_CC)  $(MY_CFLAGS) -c

# Rules for creating dependency files (.d).
#------------------------------------------

#%.d:%.c
#	@echo -n $(dir $<) > $@
#	$(DEPEND.d) $< >> $@

# e.g. ./vendor/mesh/main.o:../vendor/mesh/main.c can't match %.d:%.c above, so use below

# If use this, and change `#include "some.h"` in .c , then need `make cleanD` again
%.d:
	@c=$(join ../, $(addsuffix .c, $(basename $@))); if [ -f $$c ]; then echo -n $(dir $@) > $@; $(DEPEND.d) $$c >> $@; fi

# On Linux, the code below is only one second slower than the code above, but is more equal to %.d:%.c
#
#                          Linux(above or below)  Windows(above)  Windows(below)
# .h                        10s                    26s             27s
# .c                         5s                    17s             90s
# make clean               0.1s                     3s             26s
# make help(after cleanD)  3.5s                    48s             50s
# make(after clean cleanD)  25s                   106s            108s
#
# but Windows(below) spend too much time after edit .c , so use above by default

#%.d:$(C_SRCS)
#	@ c=$(join ../, $(addsuffix .c, $(basename $@))); if [ -f $$c ] && [ $$c -nt $@ ]; then echo -n $(dir $@) > $@; $(DEPEND.d) $$c >> $@; fi

define MAKE_MY_TARGET
$1: $2  ../makefile.targets
	$(COMPILE.c) $2 -o $1
endef

# Here will replace `%.o:` in eclipse generated subdir.mk which can not apply $(MY_CFLAGS)
$(foreach src, $(C_SRCS), $(eval $(call MAKE_MY_TARGET, $(subst ../,,$(src:.c=.o)), $(src))))

ifndef NODEP
ifneq ($(DEPS),)
  sinclude $(DEPS)
endif
endif

cleanD:
	$(RM) $(DEPS)

# Show help.
help:
	@echo 'Usage: make [TARGET]'
	@echo 'TARGETS:'
	@echo '  all       (=make) compile and link.'
	@echo '  NODEP=yes make without generating dependencies.'
	@echo '  cleanD    clean dependencies.'
	@echo '  show      show variables (for debug use only).'
	@echo '  help      print this message.'

# Show variables (for debug use only.)
show:
	@echo 'C_SRCS      :' $(C_SRCS)
	@echo 'OBJS        :' $(OBJS)
	@echo 'DEPS        :' $(DEPS)
	@echo 'CC          :' $(CC)
	@echo 'MY_CC       :' $(MY_CC)
	@echo 'MY_CFLAGS   :' $(MY_CFLAGS)
